/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oop.project;

import com.mysql.cj.xdevapi.DbDoc;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import com.sun.org.apache.xpath.internal.operations.Bool;
import com.toedter.calendar.DateUtil;
import static java.lang.Math.abs;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Aniruddh
 */
public class CompareHotels extends javax.swing.JFrame {

    /**
     * Creates new form CompareHotels
     */
    public CompareHotels() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CheckBtn1 = new javax.swing.JButton();
        compareHotelsLbl = new javax.swing.JLabel();
        placeLbl = new javax.swing.JLabel();
        checkInLbl = new javax.swing.JLabel();
        CheckOutLbl = new javax.swing.JLabel();
        noOfRoomsLbl = new javax.swing.JLabel();
        jComboBoxPlace = new javax.swing.JComboBox<>();
        jDateChooserCheckIn = new com.toedter.calendar.JDateChooser();
        jDateChooserCheckOut = new com.toedter.calendar.JDateChooser();
        noOfRoomsTxt = new javax.swing.JTextField();
        CheckBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        userNameLbl1 = new javax.swing.JLabel();
        userNameLbl = new javax.swing.JLabel();

        CheckBtn1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        CheckBtn1.setText("Check");
        CheckBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBtn1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        compareHotelsLbl.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        compareHotelsLbl.setText("Compare Hotels");

        placeLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        placeLbl.setText("1)Place");

        checkInLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        checkInLbl.setText("2)CheckIN-Date");

        CheckOutLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CheckOutLbl.setText("3)CheckOUT-Date");

        noOfRoomsLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        noOfRoomsLbl.setText("4)Number of rooms");

        jComboBoxPlace.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        jComboBoxPlace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DELHI", "MUMBAI", "HYDERABAD" }));
        jComboBoxPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlaceActionPerformed(evt);
            }
        });

        noOfRoomsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfRoomsTxtActionPerformed(evt);
            }
        });

        CheckBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        CheckBtn.setText("Check");
        CheckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        userNameLbl1.setFont(new java.awt.Font("Tahoma", 3, 16)); // NOI18N
        userNameLbl1.setText("Dummy");

        userNameLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        userNameLbl.setText("UserName :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(placeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkInLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooserCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckOutLbl)
                            .addComponent(noOfRoomsLbl))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(125, 125, 125)
                                .addComponent(CheckBtn)
                                .addGap(0, 275, Short.MAX_VALUE))
                            .addComponent(jDateChooserCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(noOfRoomsTxt))))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compareHotelsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compareHotelsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameLbl1)
                    .addComponent(userNameLbl))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(placeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkInLbl)
                    .addComponent(jDateChooserCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckOutLbl)
                    .addComponent(jDateChooserCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfRoomsLbl)
                    .addComponent(noOfRoomsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(CheckBtn))
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jDateChooserCheckIn.setMinSelectableDate(new Date());
        jDateChooserCheckOut.setMinSelectableDate(new Date());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPlaceActionPerformed

    private void CheckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBtnActionPerformed
        // TODO add your handling code here:
        String selPlace=jComboBoxPlace.getSelectedItem().toString();
        
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        Date st=jDateChooserCheckIn.getDate();
        
        Date en=jDateChooserCheckOut.getDate();
       
        
        long numberOfDays=(en.getTime()-st.getTime()+(24*3600*1000))/(24*3600*1000);
        
        if(Integer.parseInt(noOfRoomsTxt.getText())>10)
        {
            JOptionPane.showMessageDialog(null,"Number of Rooms cannot be greater than 10");
            return ;
        }
        
        int req=Integer.parseInt(noOfRoomsTxt.getText());
        int bookedRooms;
        boolean A,I,R;
        A=true;
        I=true;
        R=true;
       
    if(en.getTime()-st.getTime()>=0)
    {
        if(selPlace.equals("DELHI"))
        {

             try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='ASHOKA'" ;
               PreparedStatement statement=con.prepareStatement(query);

               for(long  i=st.getTime();i<=en.getTime() ;i+=24*60*60*1000)
               {
                   //JOptionPane.showMessageDialog(null,i==en.getTime());
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                       if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<=24*3600*1000 && abs(COUT.getTime()-i)<=24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");//error
                       }
                       
                   }
                   if(req + bookedRooms>10)
                       A=false;
                   
               }
                
            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='ITC Maurya'" ;
               PreparedStatement statement=con.prepareStatement(query);


                for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                       if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       I=false;

               }

            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='Radison Blu'" ;
               PreparedStatement statement=con.prepareStatement(query);


               for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                      if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       R=false;

               }
               
            } catch (Exception e) {
            }
                
            if(A==false && I==false && R==false)
            {
                int a=JOptionPane.showConfirmDialog(null,"No rooms available on specified dates for this location, Do you want to enroll in waiting list?");
                
                if(a==JOptionPane.YES_OPTION)
                {
                    
                DelhiWaitListPage d= new DelhiWaitListPage();
                d.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
                d.setVisible(true);
                dispose();
                }
                else
                {
                    CompareHotels ch =new CompareHotels();
                    ch.userName(userNameLbl1.getText());
                    ch.setVisible(true);
                    dispose();
                }
            }
            else
            {
               DelhiBooking d= new DelhiBooking(A,I,R);
               d.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
               d.setVisible(true);
               dispose();
            }


        }
        if(selPlace.equals("MUMBAI"))
        {

             try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='TAJ'" ;
               PreparedStatement statement=con.prepareStatement(query);


               for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                       if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       A=false;

               }
               
            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='TRIDENT'" ;
               PreparedStatement statement=con.prepareStatement(query);


                for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                     if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   
                   if(req + bookedRooms>10)
                       I=false;

               }
            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='OBEROI'" ;
               PreparedStatement statement=con.prepareStatement(query);


               for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                      if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       R=false;

               }
            } catch (Exception e) {
            }
            if(A==false && I==false && R==false)
            {
                int a=JOptionPane.showConfirmDialog(null,"No rooms available on specified dates for this location, Do you want to enroll in waiting list?");
                
                if(a==JOptionPane.YES_OPTION)
                {
                    
                MumbaiWaitListPage m= new MumbaiWaitListPage();
                m.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
                m.setVisible(true);
                dispose();
                }
                else
                {
                    CompareHotels ch =new CompareHotels();
                    ch.userName(userNameLbl1.getText());
                    ch.setVisible(true);
                    dispose();
                }
            }    
            else
            {
               MumbaiBooking m= new MumbaiBooking(A,I,R);
               m.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
               m.setVisible(true);
               dispose();

            }
            
               

        }
 if(selPlace.equals("HYDERABAD"))
        {

             try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='MINERVA'" ;
               PreparedStatement statement=con.prepareStatement(query);


               for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                      if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       A=false;

               }

            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='HYATT'" ;
               PreparedStatement statement=con.prepareStatement(query);


                for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                       if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       I=false;

               }

            } catch (Exception e) {
            }
            try {

               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='SHERATON'" ;
               PreparedStatement statement=con.prepareStatement(query);


               for(long  i=st.getTime();i<=en.getTime();i+=24*60*60*1000)
               {
                   ResultSet rs= statement.executeQuery();
                    bookedRooms=0;
                   while(rs.next())
                   {
                       Date CIN=rs.getDate("CheckIN");
                       Date COUT=rs.getDate("CheckOUT");

                      if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                       {
                           bookedRooms+=rs.getInt("NumberOfRooms");
                       }
                   }
                   if(req + bookedRooms>10)
                       R=false;

               }

            } catch (Exception e) {
            }
            
            
            if(A==false && I==false && R==false)
            {
                int a=JOptionPane.showConfirmDialog(null,"No rooms available on specified dates for this location, Do you want to enroll in waiting list?");
                
                if(a==JOptionPane.YES_OPTION)
                {
                    
                HyderabadWaitListPage h= new HyderabadWaitListPage();
                h.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
                h.setVisible(true);
                dispose();
                }
                else
                {
                    CompareHotels ch =new CompareHotels();
                    ch.userName(userNameLbl1.getText());
                    ch.setVisible(true);
                    dispose();
                }
            }
            else
            {
               HyderabadBooking h = new HyderabadBooking(A,I,R);
               
               h.changeLabels(userNameLbl1.getText(), selPlace,sdf.format(st), sdf.format(en),noOfRoomsTxt.getText(),String.valueOf(numberOfDays));
               h.setVisible(true);
               dispose();

            }
              

        }
    }
    else
    {
        JOptionPane.showMessageDialog(null,"CheckOUT Date cannot be before CheckIN Date");
    }

    
    
    
    
    
    }//GEN-LAST:event_CheckBtnActionPerformed

    private void CheckBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBtn1ActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        Welcome w1=new Welcome();
        
        w1.setVisible(true);
        w1.userName(userNameLbl1.getText());
        dispose();
        
        
    }//GEN-LAST:event_backBtnActionPerformed

    private void noOfRoomsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfRoomsTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfRoomsTxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompareHotels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompareHotels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompareHotels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompareHotels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompareHotels().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckBtn;
    private javax.swing.JButton CheckBtn1;
    private javax.swing.JLabel CheckOutLbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel checkInLbl;
    private javax.swing.JLabel compareHotelsLbl;
    private javax.swing.JComboBox<String> jComboBoxPlace;
    private com.toedter.calendar.JDateChooser jDateChooserCheckIn;
    private com.toedter.calendar.JDateChooser jDateChooserCheckOut;
    private javax.swing.JLabel noOfRoomsLbl;
    private javax.swing.JTextField noOfRoomsTxt;
    private javax.swing.JLabel placeLbl;
    private javax.swing.JLabel userNameLbl;
    private javax.swing.JLabel userNameLbl1;
    // End of variables declaration//GEN-END:variables

public void userName(String w)
{
    userNameLbl1.setText(w);
}
}
