/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oop.project;

import static java.lang.Math.abs;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aniruddh
 */
public class ModificationPage extends javax.swing.JFrame {

    /**
     * Creates new form ModificationPage
     */
    public ModificationPage() {
        initComponents();
    }
    
    
    public ModificationPage(String userName) {
        initComponents();
        userNameLbl1.setText(userName);
        try 
        {
               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="SELECT place, hotelName, checkIN, checkOUT,NumberOfRooms, BookingID, totalCost from hotels where UserName='"+userNameLbl1.getText()+"'";
               PreparedStatement stmt=con.prepareStatement(query);
               ResultSet rs=stmt.executeQuery();
               DefaultTableModel tm=(DefaultTableModel)previousBookingTable.getModel();
               tm.setRowCount(0);
               while(rs.next())
               {
                   Object o[]={rs.getString("place"),rs.getString("HotelName"),rs.getString("checkIN"),rs.getString("checkOUT"),rs.getString("NumberOfRooms"),rs.getString("BookingID"),rs.getString("totalCost")};
                   tm.addRow(o);
               }
               
               
               
        }
         catch (Exception e) {
             JOptionPane.showMessageDialog(null,"Try 1");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        previousBookingTable = new javax.swing.JTable();
        bookingIDLbl = new javax.swing.JLabel();
        bookingIDTxt = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        modifyBookingLbl = new javax.swing.JLabel();
        modifyBtn = new javax.swing.JButton();
        userNameLbl = new javax.swing.JLabel();
        userNameLbl1 = new javax.swing.JLabel();
        previousBookingLbl = new javax.swing.JLabel();
        newCheckINLbl = new javax.swing.JLabel();
        newCheckOUTLbl = new javax.swing.JLabel();
        newCheckINDate = new com.toedter.calendar.JDateChooser();
        newCheckOUTDate = new com.toedter.calendar.JDateChooser();
        noOfRoomsLbl = new javax.swing.JLabel();
        noOfRoomsTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        previousBookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Place", "Hotel Name", "CheckIN", "CheckOUT", "No.of Rooms", "BookingID", "Total Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(previousBookingTable);

        bookingIDLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        bookingIDLbl.setText("Enter Booking ID of the booking you want to modify : ");

        bookingIDTxt.setText("795058");
        bookingIDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingIDTxtActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        modifyBookingLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        modifyBookingLbl.setText("Modify Booking");

        modifyBtn.setText("Modify Booking");
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        userNameLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        userNameLbl.setText("UserName :");

        userNameLbl1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        userNameLbl1.setText("Dummy");

        previousBookingLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        previousBookingLbl.setText("Your Previous Booking(s)");

        newCheckINLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        newCheckINLbl.setText("Enter New CheckIN date :");

        newCheckOUTLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        newCheckOUTLbl.setText("Enter New CheckOUT date :");

        noOfRoomsLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        noOfRoomsLbl.setText("Number of Rooms");

        noOfRoomsTxt.setText("10");
        noOfRoomsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfRoomsTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(backBtn)
                        .addGap(156, 156, 156)
                        .addComponent(modifyBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 83, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bookingIDLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(bookingIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(modifyBookingLbl)
                                .addGap(208, 208, 208)
                                .addComponent(userNameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(userNameLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(previousBookingLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(newCheckOUTLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                        .addComponent(newCheckINLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(noOfRoomsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(noOfRoomsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(newCheckINDate, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                        .addComponent(newCheckOUTDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyBookingLbl)
                    .addComponent(userNameLbl)
                    .addComponent(userNameLbl1))
                .addGap(28, 28, 28)
                .addComponent(previousBookingLbl)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookingIDLbl)
                            .addComponent(bookingIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(newCheckINLbl))
                    .addComponent(newCheckINDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newCheckOUTDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newCheckOUTLbl))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfRoomsLbl)
                    .addComponent(noOfRoomsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        newCheckINDate.setMinSelectableDate(new Date());
        newCheckOUTDate.setMinSelectableDate(new Date());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookingIDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingIDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookingIDTxtActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        Welcome w1=new Welcome();
        w1.setVisible(true);
        w1.userName(userNameLbl1.getText());
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
           // TODO add your handling code here:
           if(newCheckOUTDate.getDate().getTime()-newCheckINDate.getDate().getTime()<0)
           {
               JOptionPane.showMessageDialog(null,"CheckOUT date cannot be before CheckIN date");
               return ;
           }
           
           try {
             Class.forName("com.mysql.cj.jdbc.Driver");
             Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
             String query="select * from hotels where  (bookingID='"+bookingIDTxt.getText()+"') AND username='"+userNameLbl1.getText()+"'";
             PreparedStatement stmt=con.prepareStatement(query);
             ResultSet rs=stmt.executeQuery();
             
             if(rs.next())
             {
                 long cin=rs.getDate("CheckIN").getTime();
                 cin=cin-cin%(24*3600*1000);
                if(!(cin-(new Date()).getTime()>=3))
                {
                    JOptionPane.showMessageDialog(null,"Modification cannot be done,as less than 3 days are left before checkin date");
                }
                else
                {
                        String query2="select Place,hotelName, CheckIN , CheckOUT ,NumberOfRooms from hotels where NOT (bookingID='"+bookingIDTxt.getText()+"') AND hotelName='"+rs.getString("hotelName")+"'";///Error was here
                        PreparedStatement stmt2=con.prepareStatement(query2);
                        ResultSet rs2;//=stmt2.executeQuery();
                        boolean A=true;
                        long nodays1=(rs.getDate("checkOUT").getTime()-rs.getDate("checkIN").getTime())/(24*3600*1000)+1;
                        int costPN=(int) ((Integer.parseInt(rs.getString("totalCost"))/rs.getInt("numberOfRooms"))/nodays1);
                        int bookedRooms=0;
                       for(long  i=newCheckINDate.getDate().getTime();i<=newCheckOUTDate.getDate().getTime();i+=24*60*60*1000)
                       {
                          rs2=stmt2.executeQuery();
                           bookedRooms=0;
                           while(rs2.next())
                           {
                               Date CIN=rs2.getDate("CheckIN");
                               Date COUT=rs2.getDate("CheckOUT");
                               //JOptionPane.showMessageDialog(null,rs2.getDate("CheckIN"));

                               if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                               {

                                   bookedRooms+=rs2.getInt("NumberOfRooms");

                               }
                           }
                           //JOptionPane.showMessageDialog(null,"Booked rooms :"+bookedRooms);
                           if(Integer.parseInt(noOfRoomsTxt.getText()) + bookedRooms>10)
                               A=false;

                       } 


                       if(A)
                       {
                           java.sql.Date sqlDateCIN = new java.sql.Date(newCheckINDate.getDate().getTime());
                           java.sql.Date sqlDateCOUT = new java.sql.Date(newCheckOUTDate.getDate().getTime());
                           String query3="UPDATE hotels SET CheckIN=?,CheckOUT=?,NumberOfRooms=?,TotalCost=? where bookingID='"+bookingIDTxt.getText()+"'";
                           //String query3="UPDATE hotels SET NumberOfRooms='3'";
                           PreparedStatement stmt3=con.prepareStatement(query3);
                           stmt3.setDate(1, sqlDateCIN);
                           stmt3.setDate(2, sqlDateCOUT);
                           stmt3.setInt(3,Integer.parseInt(noOfRoomsTxt.getText()));
                           long nodays2=(newCheckOUTDate.getDate().getTime()-newCheckINDate.getDate().getTime())/(24*3600*1000)+1;
                           stmt3.setString(4,Integer.toString((int) (costPN*nodays2*Integer.parseInt(noOfRoomsTxt.getText()))));

                           int a=JOptionPane.showConfirmDialog(null,"Are you sure you want to modify, new total cost of stay will be Rs."+Integer.toString((int) (costPN*nodays2*Integer.parseInt(noOfRoomsTxt.getText()))));
                           //int a=JOptionPane.showConfirmDialog(null,"confirm?");
                           if(a==JOptionPane.YES_OPTION)
                           {
                               stmt3.executeUpdate();

                               try {

                                Class.forName("com.mysql.cj.jdbc.Driver");
                               // Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
                                String query4="SELECT place, hotelName, checkIN, checkOUT,NumberOfRooms, BookingID, totalCost from hotels where UserName='"+userNameLbl1.getText()+"'";
                                PreparedStatement stmt4=con.prepareStatement(query4);
                                ResultSet rs4=stmt4.executeQuery();
                                DefaultTableModel tm=(DefaultTableModel)previousBookingTable.getModel();
                                tm.setRowCount(0);
                                while(rs4.next())
                                {
                                    Object o[]={rs4.getString("place"),rs4.getString("HotelName"),rs4.getString("checkIN"),rs4.getString("checkOUT"),rs4.getString("NumberOfRooms"),rs4.getString("BookingID"),rs4.getString("totalCost")};
                                    tm.addRow(o);
                                }

                                JOptionPane.showMessageDialog(null,"Booking modification successful");
                                 clearWaitList();

                            }
                             catch (Exception e) {
                                 JOptionPane.showMessageDialog(null,"Try 2"+e);
                            }



                           }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null,"Rooms not available for specified dates,try changing dates or nomber of rooms");
                        }

             }
              
               

            }
             else
             {
                 JOptionPane.showMessageDialog(null, "No booking exist with given BookingID : "+bookingIDTxt.getText()); 
             }
              
             
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,"Try 3"+e);
        }
       
    }//GEN-LAST:event_modifyBtnActionPerformed

    private void noOfRoomsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfRoomsTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfRoomsTxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificationPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel bookingIDLbl;
    private javax.swing.JTextField bookingIDTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel modifyBookingLbl;
    private javax.swing.JButton modifyBtn;
    private com.toedter.calendar.JDateChooser newCheckINDate;
    private javax.swing.JLabel newCheckINLbl;
    private com.toedter.calendar.JDateChooser newCheckOUTDate;
    private javax.swing.JLabel newCheckOUTLbl;
    private javax.swing.JLabel noOfRoomsLbl;
    private javax.swing.JTextField noOfRoomsTxt;
    private javax.swing.JLabel previousBookingLbl;
    private javax.swing.JTable previousBookingTable;
    private javax.swing.JLabel userNameLbl;
    private javax.swing.JLabel userNameLbl1;
    // End of variables declaration//GEN-END:variables
public void clearWaitList()
  {
     // JOptionPane.showMessageDialog(null,"Waitlist");
             try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
                    String query="select * from waitlist ORDER BY Time"  ;
                    PreparedStatement stmt=con.prepareStatement(query);
                    ResultSet rs=stmt.executeQuery();
                    
                    try {
                     // JOptionPane.showMessageDialog(null,"Waitlist");
                    while(rs.next())
                    {
                        String query2="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='"+rs.getString("HotelName")+"'" ;
                        PreparedStatement stmt2=con.prepareStatement(query2);
                        
                        boolean A=true;
                        int bookedRooms;
                            for(long  i=rs.getDate("CheckIN").getTime();i<=rs.getDate("CheckOUT").getTime() ;i+=24*60*60*1000)
                            {

                                ResultSet rs2= stmt2.executeQuery();
                                 bookedRooms=0;
                                while(rs2.next())
                                {
                                    Date CIN=rs2.getDate("CheckIN");
                                    Date COUT=rs2.getDate("CheckOUT");

                                    if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                                    {
                                        bookedRooms+=rs2.getInt(3);//error
                                    }
                                }
                                if(rs.getInt("NumberOfRooms") + bookedRooms>10)
                                    A=false;
                                // JOptionPane.showMessageDialog(null,"Waitlist booked rooms"+bookedRooms);
                            }
                           
                            if(A)
                            {
                                String query3="INSERT INTO hotels VALUES(?,?,?,?,?,?,?,?,?)";
                                PreparedStatement stmt3=con.prepareStatement(query3);

                                String bookingID=rs.getString("BookingID");
                                stmt3.setString(1, rs.getString("UserName"));
                                stmt3.setString(2, rs.getString("Place"));
                                stmt3.setString(3, rs.getString("HotelName"));

                                Date CIN =rs.getDate("CheckIN");
                                Date COUT=rs.getDate("CheckOUT");
                                java.sql.Date sqlDateCIN = new java.sql.Date(CIN.getTime());
                                java.sql.Date sqlDateCOUT = new java.sql.Date(COUT.getTime());




                                stmt3.setDate(4, sqlDateCIN);
                                stmt3.setDate(5, sqlDateCOUT);
                                stmt3.setInt(6, rs.getInt("NumberOfRooms"));

                                stmt3.setString(7, bookingID);
                                stmt3.setString(8,rs.getString("AdharNumber"));
                                stmt3.setString(9, Integer.toString(rs.getInt("TotalCost")));




                                int rowInserted;

                                rowInserted=stmt3.executeUpdate();
                                
                                if(rowInserted>0)
                                {
                                    String query4="DELETE FROM WAITLIST WHERE bookingID='"+bookingID+"'";
                                    PreparedStatement stmt4=con.prepareStatement(query4);
                                    stmt4.executeUpdate();
                                   
                                }
                                

                            }
                            
                            
                    }
                        
                        
                 } catch (Exception e) {
                     //JOptionPane.showMessageDialog(null,"try 1"+e);

                 }
                    
                    
                    
                 
      } catch (Exception e) {
          JOptionPane.showMessageDialog(null,"try 2"+e);
      }
             
  }
}
