/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oop.project;

import static java.lang.Math.abs;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.security.rsa.RSACore;

/**
 *
 * @author Aniruddh
 */
public class CancelBookingPage extends javax.swing.JFrame {

    /**
     * Creates new form CancelBooking
     */
    public CancelBookingPage() {
        initComponents();
    }
    
    public CancelBookingPage(String UserName) {
        initComponents();
        userNameLbl1.setText(UserName);
        try 
        {
               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query="SELECT place, hotelName, checkIN, checkOUT,NumberOfRooms, BookingID, totalCost from hotels where UserName='"+userNameLbl1.getText()+"'";
               PreparedStatement stmt=con.prepareStatement(query);
               ResultSet rs=stmt.executeQuery();
               DefaultTableModel tm=(DefaultTableModel)previousBookingTable.getModel();
               tm.setRowCount(0);
               while(rs.next())
               {
                   Object o[]={rs.getString("place"),rs.getString("HotelName"),rs.getString("checkIN"),rs.getString("checkOUT"),rs.getString("NumberOfRooms"),rs.getString("BookingID"),rs.getString("totalCost")};
                   tm.addRow(o);
               }
               
               
               
        }
         catch (Exception e) {
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelBookingLbl = new javax.swing.JLabel();
        userNameLbl = new javax.swing.JLabel();
        userNameLbl1 = new javax.swing.JLabel();
        previousBookingLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        previousBookingTable = new javax.swing.JTable();
        bookingIDLbl = new javax.swing.JLabel();
        bookingIDTxt = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cancelBookingLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        cancelBookingLbl.setText("Cancel Booking");

        userNameLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        userNameLbl.setText("UserName :");

        userNameLbl1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        userNameLbl1.setText("Dummy");

        previousBookingLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        previousBookingLbl.setText("Your Previous Booking(s)");

        previousBookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Place", "Hotel Name", "CheckIN", "CheckOUT", "No.of Rooms", "BookingID", "Total Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(previousBookingTable);

        bookingIDLbl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        bookingIDLbl.setText("Enter Booking ID of the booking you want to cancel : ");

        bookingIDTxt.setText("324766");
        bookingIDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingIDTxtActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel Booking");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bookingIDLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookingIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelBookingLbl)
                                .addGap(208, 208, 208)
                                .addComponent(userNameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(userNameLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(previousBookingLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(backBtn)
                        .addGap(109, 109, 109)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBookingLbl)
                    .addComponent(userNameLbl)
                    .addComponent(userNameLbl1))
                .addGap(28, 28, 28)
                .addComponent(previousBookingLbl)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookingIDLbl)
                    .addComponent(bookingIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookingIDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingIDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookingIDTxtActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        if(bookingIDTxt.getText().length()!=0)
        {
            try {
               
               Class.forName("com.mysql.cj.jdbc.Driver");
               Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
               String query1="SELECT * FROM hotels where BookingID='"+bookingIDTxt.getText()+"'"+"AND username='"+userNameLbl1.getText()+"'";
               String query2="DELETE from hotels where BookingID='"+bookingIDTxt.getText()+"'"+"AND username='"+userNameLbl1.getText()+"'";
               PreparedStatement stmt1=con.prepareStatement(query1);
               PreparedStatement stmt2=con.prepareStatement(query2);
               ResultSet rs=stmt1.executeQuery();
               //ResultSet rs=stmt.executeQuery();
               if(rs.next())
               {
                   
                    Date st=rs.getDate("CheckIN");
                    Date curr=new Date();

                    double diff;
                    diff=(double)(st.getTime()-curr.getTime())/(24*3600*1000);
                   
                    //JOptionPane.showMessageDialog(null,"booking exist with given BookingID : "+bookingIDTxt.getText()+" with diff : "+Long.toString(diff));
                    if(diff>2)
                    {
                        int a=JOptionPane.showConfirmDialog(null, "Are you sure, you want to cancel existing booking");
                        if(a==JOptionPane.YES_OPTION)
                        {
                            int rs2=stmt2.executeUpdate();
                           
                            if(rs2>0)
                            {
                                JOptionPane.showMessageDialog(null,"Cancelation succesfull with BookingID : "+bookingIDTxt.getText());
                                 clearWaitList();
                                try 
                                {
                                       Class.forName("com.mysql.cj.jdbc.Driver");
                                       Connection con3 = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
                                       String query3="SELECT place, hotelName, checkIN, checkOUT,NumberOfRooms, BookingID, totalCost from hotels where UserName='"+userNameLbl1.getText()+"'";
                                       PreparedStatement stmt=con3.prepareStatement(query3);
                                       ResultSet rs3=stmt.executeQuery();
                                       DefaultTableModel tm=(DefaultTableModel)previousBookingTable.getModel();
                                       tm.setRowCount(0);
                                       while(rs3.next())
                                       {
                                           Object o[]={rs3.getString("place"),rs3.getString("HotelName"),rs3.getString("checkIN"),rs3.getString("checkOUT"),rs3.getString("NumberOfRooms"),rs3.getString("BookingID"),rs3.getString("totalCost")};
                                           tm.addRow(o);
                                       }
                                }
                                catch (Exception e) {
                               }
                                
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Sorry Some error occurred");
                            }
                        }
                    }
                    else if(diff<=2 && diff>0)
                    {
                        int a=JOptionPane.showConfirmDialog(null, "Are you sure, you want to cancel existing booking,you will have to pay Rs."+(Integer.parseInt(rs.getString("TotalCost"))/2));
                        if(a==JOptionPane.YES_OPTION)
                        {
                            int rs2=stmt2.executeUpdate();
                           
                            if(rs2>0)
                            {
                                JOptionPane.showMessageDialog(null,"Cancelation succesfull with BookingID : "+bookingIDTxt.getText());
                                 clearWaitList();
                                try 
                                {
                                       Class.forName("com.mysql.cj.jdbc.Driver");
                                       Connection con3 = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
                                       String query3="SELECT place, hotelName, checkIN, checkOUT,NumberOfRooms, BookingID, totalCost from hotels where UserName='"+userNameLbl1.getText()+"'";
                                       PreparedStatement stmt=con3.prepareStatement(query3);
                                       ResultSet rs3=stmt.executeQuery();
                                       DefaultTableModel tm=(DefaultTableModel)previousBookingTable.getModel();
                                       tm.setRowCount(0);
                                       while(rs3.next())
                                       {
                                           Object o[]={rs3.getString("place"),rs3.getString("HotelName"),rs3.getString("checkIN"),rs3.getString("checkOUT"),rs3.getString("NumberOfRooms"),rs3.getString("BookingID"),rs3.getString("totalCost")};
                                           tm.addRow(o);
                                       }
                                }
                                catch (Exception e) {
                               }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Sorry Some error occurred");
                            }
                        }
                    }
                  else
                    {
                        JOptionPane.showMessageDialog(null,"Cancellation not allowed on or after CheckIN date");
                    }
               
               }
               else
               {
                   JOptionPane.showMessageDialog(null,"No booking exist with given BookingID : "+bookingIDTxt.getText());
               }
               
               
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
        
        
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
         Welcome w1=new Welcome();
         w1.setVisible(true);
         w1.userName(userNameLbl1.getText());
         dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CancelBookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CancelBookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CancelBookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CancelBookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CancelBookingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel bookingIDLbl;
    private javax.swing.JTextField bookingIDTxt;
    private javax.swing.JLabel cancelBookingLbl;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel previousBookingLbl;
    private javax.swing.JTable previousBookingTable;
    private javax.swing.JLabel userNameLbl;
    private javax.swing.JLabel userNameLbl1;
    // End of variables declaration//GEN-END:variables

  public void clearWaitList()
  {
             try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/usersdb","root","shantanu2003"); 
                    String query="select * from waitlist ORDER BY Time"  ;
                    PreparedStatement stmt=con.prepareStatement(query);
                    ResultSet rs=stmt.executeQuery();
                    
                    try {
                     
                    while(rs.next())
                    {
                        String query2="select CheckIN , CheckOUT ,NumberOfRooms from hotels where HotelName='"+rs.getString("HotelName")+"'" ;
                        PreparedStatement stmt2=con.prepareStatement(query2);
                        
                        boolean A=true;
                        int bookedRooms;
                            for(long  i=rs.getDate("CheckIN").getTime();i<=rs.getDate("CheckOUT").getTime() ;i+=24*60*60*1000)
                            {

                                ResultSet rs2= stmt2.executeQuery();
                                 bookedRooms=0;
                                while(rs2.next())
                                {
                                    Date CIN=rs2.getDate("CheckIN");
                                    Date COUT=rs2.getDate("CheckOUT");

                                    if((CIN.getTime()<=i && COUT.getTime()>=i) || (abs(CIN.getTime()-i)<24*3600*1000 && abs(COUT.getTime()-i)<24*3600*1000))
                                    {
                                        bookedRooms+=rs2.getInt(3);//error
                                    }
                                }
                                if(rs.getInt("NumberOfRooms") + bookedRooms>10)
                                    A=false;

                            }
                            if(A)
                            {
                                String query3="INSERT INTO hotels VALUES(?,?,?,?,?,?,?,?,?)";
                                PreparedStatement stmt3=con.prepareStatement(query3);

                                String bookingID=rs.getString("BookingID");
                                stmt3.setString(1, rs.getString("UserName"));
                                stmt3.setString(2, rs.getString("Place"));
                                stmt3.setString(3, rs.getString("HotelName"));

                                Date CIN =rs.getDate("CheckIN");
                                Date COUT=rs.getDate("CheckOUT");
                                java.sql.Date sqlDateCIN = new java.sql.Date(CIN.getTime());
                                java.sql.Date sqlDateCOUT = new java.sql.Date(COUT.getTime());




                                stmt3.setDate(4, sqlDateCIN);
                                stmt3.setDate(5, sqlDateCOUT);
                                stmt3.setInt(6, rs.getInt("NumberOfRooms"));

                                stmt3.setString(7, bookingID);
                                stmt3.setString(8,rs.getString("AdharNumber"));
                                stmt3.setString(9, Integer.toString(rs.getInt("TotalCost")));




                                int rowInserted;

                                rowInserted=stmt3.executeUpdate();
                                
                                if(rowInserted>0)
                                {
                                    String query4="DELETE FROM WAITLIST WHERE bookingID='"+bookingID+"'";
                                    PreparedStatement stmt4=con.prepareStatement(query4);
                                    stmt4.executeUpdate();
                                }
                                

                            }
                            
                            
                    }
                        
                        
                 } catch (Exception e) {
                   
                 }
                    
                    
                    
                 
      } catch (Exception e) {
         
      }
             
  }



}
